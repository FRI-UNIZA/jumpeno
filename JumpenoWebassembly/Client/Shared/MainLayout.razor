@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
@using JumpenoWebassembly.Client.ErrorHandling
@using JumpenoWebassembly.Shared.ErrorHandling
@inject NavigationManager Navigation
@inject ErrorService _errorService

<div class="main">

    <BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

    <Navbar/>

    <div class="content px-4">
        <CustomErrorBoundary>
            <ChildContent>
                @Body
            </ChildContent>
            <ErrorContent Context="ThrownException">
                <div class="wrapper-flex">
                    <div class="card card-glass width-75 height-50">
                        <h1>Error</h1>
                        <div class="width-100 height-100">
            
                            <h3>Something went wrong! Please try to describe the situation that lead to this crash and submit it.</h3>
                            <textarea @bind="_notes" class="width-100"/>
                            <button class="btn btn-info" @onclick="() => HandleError(ThrownException)">Submit</button>

                        </div>
                    </div>
                </div>
            </ErrorContent>
        </CustomErrorBoundary>
    </div>

</div>


@code{
    private CustomErrorBoundary _errorBoundary;

    private string? _notes = "";
    protected override void OnInitialized()
    {
        _errorBoundary = new CustomErrorBoundary();
    }

    private async Task HandleError(Exception exception)
    {
        Error error = new Error()
            {
                Type = exception.GetType().ToString(),
                Message = exception.Message,
                Date = DateTime.Now,
                Notes = _notes,
            };
        Console.WriteLine("Chcem poslat error z MainLayout");
        await _errorService.SubmitError(error);
        _errorBoundary.Clear();
        Navigation.NavigateTo("/", true);
    }
}
