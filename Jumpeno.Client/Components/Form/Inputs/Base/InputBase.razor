@namespace Jumpeno.Client.Components

@typeparam T
@inherits FormComponent<InputViewModel<T>>

@code {
    protected RenderFragment Render() =>
    @<div class="@ComputeClassBase()" style="@Style">
        <FormWrap Type="ERROR_TYPE.AUTOHIDE" ViewModel="ViewModel" Component="this">
            <div class="@ComputeClassComponent()">
                @if (Icon is not null) { <div class="input-icon-before">@Icon</div> }
                <input
                    id="@ViewModel.FormID"
                    name="@Name"
                    type="@ComputeType()"
                    class="@CLASS_INPUT_BASE_INPUT"
                    placeholder="@ViewModel.Placeholder"
                    aria-label="@FormLabel.Main(Label)"
                    aria-invalid="@ViewModel.Error.HasError"
                    inputmode="@ComputeInputMode()"
                    autocomplete="@ComputeAutocomplete()"
                    @bind:event="oninput"
                    @bind:get="@TempValue"
                    @bind:set="HandleInput"
                    @onblur="HandleChange"
                    @onkeydown="HandleKeyDown"
                />
                @if (IconAfter is not null) { <div class="input-icon-after">@IconAfter</div> }
                @if (AllowClear) {
                    <div class="input-clear">
                        <button
                            type="buttton"
                            class="input-clear-button"
                            tabindex="@ComputeTabindexClear()"
                            aria-label="@I18N.T("Clear")"
                            @onclick="@(async () => {
                                await ViewModel.Clear();
                                ActionHandler.SetFocus(ViewModel.FormID);
                            })"
                        >
                            <AntIcon Type="close" Theme="outline" />
                        </button>
                    </div>
                }
            </div>
        </FormWrap>
    </div>;
}

@Render()
