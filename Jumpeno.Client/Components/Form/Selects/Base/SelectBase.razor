@namespace Jumpeno.Client.Components

@inherits SurfaceComponent

@code {
    protected RenderFragment Render() {
        return @<Fragment>
            <div class="@ComputeWrapperClass()">
                @if (!HideLabel) { <InputLabel For="@ID">@Label</InputLabel> }
                <button
                    id="@ID"
                    type="@BUTTON_TYPE.BUTTON.String()"
                    aria-roledescription="combobox"
                    aria-label="@($"{Label}, {I18N.T("Selected: I18N{option}", new() {{ "option", Selected.Label }})}")"
                    class="@ComputeButtonClass()"
                    @onclick="@OpenModal"
                >
                    @if (Selected == EMPTY_OPTION) {
                        <span class="@CLASS_SELECT_INPUT_EMPTY">&nbsp;</span>
                    } else {
                        <span class="@CLASS_SELECT_INPUT_TEXT">@Selected.Label</span>
                    }
                    <AntIcon Type="down" Theme="outline" Class="@CLASS_SELECT_INPUT_ICON" />
                </button>
            </div>

            <Modal
                @ref="@ModalRef"
                Label="@Label"
                NoFooter
                MinWidth="@MinWidth"
                MaxWidth="@MaxWidth"
                MinHeight="@MinHeight"
                MaxHeight="@MaxHeight"
                Style="@ComputeModalStyle()"
                OnBeforeOpen="@HandleBeforeOpen"
                OnAfterClose="@HandleAfterClose"
            >
                <Content>
                    <div class="@CLASS_OPTIONS">
                        @foreach(var option in DisplayedOptions) {
                            <button
                                type="@BUTTON_TYPE.BUTTON.String()"
                                role="option"
                                aria-label="@option.Label"
                                class="@ComputeOptionClass(option)"
                                style="@ComputeOptionStyle()"
                                @onclick="@(() => SelectOption(option))"
                            >
                                @(option == EMPTY_OPTION ? $"-- {@option.Label} --" : @option.Label)
                            </button>
                        }
                    </div>
                </Content>
            </Modal>
        </Fragment>;
    }
}

@Render()
