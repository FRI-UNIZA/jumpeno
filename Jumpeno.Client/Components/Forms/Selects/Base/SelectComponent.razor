@namespace Jumpeno.Client.Components

@inherits FormField<SelectViewModel>

@code {
    protected override FORM_ERROR_TYPE? FormErrorType => FORM_ERROR_TYPE.CONNECTED;
    protected override RenderFragment RenderField() => @<Fragment>
        <button
            id="@ViewModel.FormID"
            type="@BUTTON_TYPE.BUTTON.String()"
            aria-roledescription="combobox"
            aria-label="@($"{HTML.Label.First(Label)}, {OptionPlaceholder()}")"
            aria-invalid="@ViewModel.Error.HasError"
            class="@CLASS_SELECT_INPUT"
            disabled="@Disabled"
            @onclick="@OpenModal"
        >
            @if (ViewModel.Value == SELECT.EMPTY_OPTION) {
                if (ViewModel.Placeholder == null) {
                    <span class="@CLASS_SELECT_INPUT_EMPTY">&nbsp;</span>
                } else {
                    <span class="@CLASS_SELECT_INPUT_TEXT @CLASS_SELECT_INPUT_PLACEHOLDER">@ViewModel.Placeholder</span>
                }
            } else {
                <span class="@CLASS_SELECT_INPUT_TEXT">@ViewModel.Value.Label</span>
            }
            <AntIcon Type="down" Theme="outline" Class="@CLASS_SELECT_INPUT_ICON" />
        </button>
        <Modal
            @ref="@ModalRef"
            Surface="ModalSurface"
            Label="Label"
            NoFooter
            Class="@ComputeModalClass()"
            OnBeforeOpen="@HandleBeforeOpen"
            OnAfterClose="@HandleAfterClose"
        >
            <SubHeader>
                @if (ViewModel.Search) {
                    <InputSearch
                        ViewModel="ViewModel.SearchVM"
                        Variant="FORM_VARIANT.PRIMARY"
                        Size="SearchSize"
                        Align="SearchAlign"
                        Label="@I18N.T("Search")"
                        Class="@CLASS_SELECT_INPUT_SEARCH"
                    />
                }
            </SubHeader>
            <Content>
                <div class="@CLASS_OPTIONS" role="listbox">
                    @if (DisplayedOptions.Count > 0) {
                        @foreach(var option in DisplayedOptions) {
                            <button
                                @key="option.Label"
                                type="@BUTTON_TYPE.BUTTON.String()"
                                role="option"
                                aria-label="@option.Label"
                                aria-selected="false"
                                class="@ComputeOptionClass(option)"
                                @onclick="@(async () => await SelectOption(option))"
                            >
                                @(option == SELECT.EMPTY_OPTION ? $"-- {@option.Label} --" : @option.Label)
                            </button>
                        }
                    } else {
                        <p tabindex="0" class="@CLASS_SELECT_EMPTY_TEXT">-- @I18N.T("No data") --</p>
                    }
                </div>
            </Content>
        </Modal>
    </Fragment>;
}

@Render()
