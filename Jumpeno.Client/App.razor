@namespace Jumpeno.Client

@code {
    // Views ------------------------------------------------------------------------------------------------------------------------------
    private ThemeProvider ThemeProviderRef = null!;
    private CookieModal CookieModalRef = null!;
    public void Notify() => StateHasChanged();

    // Lifecycle --------------------------------------------------------------------------------------------------------------------------
    protected override void OnInitialized() => AuthPage.Init(this);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        try {
            if (!firstRender) { AuthPage.FinishStage(); return; }
            // Import:
            await ClientImport.Await();
            // Authorization:
            await HTTP.Sync(async () => {
                if (!await Auth.TryLogInAdmin()) await Auth.TryLogInToken();
            });
            await AuthPage.NextStage();
            await AuthPage.ChangePath();
            await AuthPage.AddRedirect();
            // Theme:
            await ThemeProviderRef.Initialization;
            // Culture:
            await SelectCulture.Init();
            // Cookie modal:
            var cookieModalOpen = await CookieStorage.InitModal();
            // Init actions:
            await Init.Run();
            // Server loader:
            ServerPageLoader.Hide();
            await PageLoader.Hide(PAGE_LOADER_TASK.INITIAL, false);
            // PageLoader:
            await PageLoader.WithActiveLoader(() => ActionHandler.SetFocus(PageLoader.ID));
            await PageLoader.AwaitAllLoaders();
            // Focus:
            if (cookieModalOpen) ActionHandler.SetFocus(CookieModalRef.GetDialogID());
            else ActionHandler.SetFocus(WebDocument.ID);
        } catch {
            // Initialization error:
            ServerPageLoader.Stop();
            Notification.Error(MESSAGE.DEFAULT.T);
        }
    }
}

<ThemeProvider @ref="ThemeProviderRef">
    <ImagePreloader />
    <CanvasPreRenderer />
    <AriaPageAlert />
    <PageLoader>
        <ModalProvider>
            <WebDocument>
                <DocTitle Value="@AppSettings.Name" />
                <AuthPage>
                    <AppLayout>
                        <Router AppAssembly="@typeof(App).Assembly">
                            <Found Context="routeData">
                                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                            </Found>
                            <NotFound>
                                <LayoutView Layout="@typeof(MainLayout)">
                                    <Error404Page />
                                </LayoutView>
                            </NotFound>
                        </Router>
                    </AppLayout>
                </AuthPage>
            </WebDocument>
        </ModalProvider>
        <AntDesign.AntContainer />
        <CookieModal @ref="CookieModalRef" />
    </PageLoader>
    <Notification />
</ThemeProvider>
